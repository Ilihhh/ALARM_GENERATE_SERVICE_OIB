using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;
using Contracts;

namespace ClientApp
{
    public class WCFClient : ChannelFactory<IWCFService>, IWCFService, IDisposable
    {
        IWCFService factory;

        public WCFClient(NetTcpBinding binding, EndpointAddress address)
            : base(binding, address)
        {
            factory = this.CreateChannel();
        }

        /// <summary>
        /// Vraća sve alarme iz baze podataka.
        /// </summary>
        /// <returns>Lista alarma</returns>
        public List<Alarm> GetAllAlarms()
        {
            try
            {
                List<Alarm> alarms = factory.GetAllAlarms();
                Console.WriteLine("Successfully retrieved {0} alarms from the database.", alarms.Count);

                // Ispisivanje svakog alarma
                foreach (var alarm in alarms)
                {
                    Console.WriteLine(alarm.ToString());
                }

                return alarms;
            }
            catch (Exception e)
            {
                Console.WriteLine("Error while trying to retrieve alarms: {0}", e.Message);
                return new List<Alarm>(); // Vraćanje prazne liste da se izbegne null reference error.
            }
        }


        /// <summary>
        /// Generiše novi alarm i dodaje ga u bazu podataka.
        /// </summary>
        /// <param name="alarm">Alarm koji se dodaje</param>
        public void GenerateAlarm(Alarm alarm)
        {
            try
            {
                factory.GenerateAlarm(alarm);
                Console.WriteLine("Alarm successfully generated: {0}", alarm);
            }
            catch (Exception e)
            {
                Console.WriteLine("Error while trying to generate alarm: {0}", e.Message);
            }
        }

        /// <summary>
        /// Briše sve alarme iz baze podataka.
        /// </summary>
        public void DeleteAllAlarms()
        {
            try
            {
                factory.DeleteAllAlarms();
                Console.WriteLine("All alarms successfully deleted.");
            }
            catch (Exception e)
            {
                Console.WriteLine("Error while trying to delete all alarms: {0}", e.Message);
            }
        }

        /// <summary>
        /// Briše sve alarme koje je generisao trenutni klijent.
        /// </summary>
        public void DeleteClientAlarms()
        {
            try
            {
                factory.DeleteClientAlarms();
                Console.WriteLine("Successfully deleted alarms generated by the current client.");
            }
            catch (Exception e)
            {
                Console.WriteLine("Error while trying to delete client-generated alarms: {0}", e.Message);
            }
        }

        #region ManagePrms

        /// <summary>
        /// Upravljanje permisijama za određene uloge.
        /// </summary>
        /// <param name="isAdd">True za dodavanje, false za uklanjanje</param>
        /// <param name="rolename">Ime uloge</param>
        /// <param name="permissions">Lista permisija</param>
        public void ManagePermission(bool isAdd, string rolename, params string[] permissions)
        {
            try
            {
                factory.ManagePermission(isAdd, rolename, permissions);
                Console.WriteLine("Permission management successful for role: {0}", rolename);
            }
            catch (Exception e)
            {
                Console.WriteLine("Error while trying to manage permissions: {0}", e.Message);
            }
        }

        /// <summary>
        /// Upravljanje korisničkim ulogama.
        /// </summary>
        /// <param name="isAdd">True za dodavanje, false za uklanjanje</param>
        /// <param name="rolename">Ime uloge</param>
        public void ManageRoles(bool isAdd, string rolename)
        {
            try
            {
                factory.ManageRoles(isAdd, rolename);
                Console.WriteLine("Role management successful for role: {0}", rolename);
            }
            catch (Exception e)
            {
                Console.WriteLine("Error while trying to manage roles: {0}", e.Message);
            }
        }

        #endregion

        /// <summary>
        /// Oslobađa resurse klijenta.
        /// </summary>
        public void Dispose()
        {
            if (factory != null)
            {
                factory = null;
            }

            this.Close();
        }
    }
}
